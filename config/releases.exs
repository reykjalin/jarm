# In this file, we load production configuration and secrets
# from environment variables. You can also hardcode secrets,
# although such is generally not recommended and you have to
# remember to add this file to your .gitignore.
import Config

database_path = System.get_env("DATABASE_PATH") || "./prod.sqlite3"

url = System.get_env("URL") || "localhost"

smtp_username =
  case System.get_env("SMTP_USERNAME") do
    nil ->
      raise """
      environment variable SMTP_USERNAME is missing.
      Please set the SMTP_USERNAME before starting Inner Circle.
      """

    "" ->
      raise """
      environment variable SMTP_USERNAME is missing.
      Please set the SMTP_USERNAME before starting Inner Circle.
      """

    value ->
      value
  end

smtp_password =
  case System.get_env("SMTP_PASSWORD") do
    nil ->
      raise """
      environment variable SMTP_PASSWORD is missing.
      Please set the SMTP_PASSWORD before starting Inner Circle.
      """

    "" ->
      raise """
      environment variable SMTP_PASSWORD is missing.
      Please set the SMTP_PASSWORD before starting Inner Circle.
      """

    value ->
      value
  end

smtp_server =
  case System.get_env("SMTP_SERVER") do
    nil ->
      raise """
      environment variable SMTP_SERVER is missing.
      Please set the SMTP_SERVER before starting Inner Circle.
      """

    "" ->
      raise """
      environment variable SMTP_SERVER is missing.
      Please set the SMTP_SERVER before starting Inner Circle.
      """

    value ->
      value
  end

smtp_port =
  case System.get_env("SMTP_PORT") do
    nil ->
      raise """
      environment variable SMTP_PORT is missing.
      Please set the SMTP_PORT before starting Inner Circle.
      """

    "" ->
      raise """
      environment variable SMTP_PORT is missing.
      Please set the SMTP_PORT before starting Inner Circle.
      """

    value ->
      value
  end

smtp_retries = System.get_env("SMTP_RETRIES") || "0"

config :inner_circle, InnerCircle.Repo, database: database_path
# ssl: true,

secret_key_base =
  case System.get_env("SECRET_KEY_BASE") do
    nil ->
      raise """
      environment variable SECRET_KEY_BASE is missing.
      You can generate one by calling: mix phx.gen.secret
      """

    "" ->
      raise """
      environment variable SECRET_KEY_BASE is missing.
      You can generate one by calling: mix phx.gen.secret
      """

    value ->
      value
  end

live_view_signing_salt =
  case System.get_env("LIVE_VIEW_SIGNING_SALT") do
    nil ->
      raise """
      environment variable LIVE_VIEW_SIGNING_SALT is missing.
      You can generate one by calling: mix phx.gen.secret
      """

    "" ->
      raise """
      environment variable LIVE_VIEW_SIGNING_SALT is missing.
      You can generate one by calling: mix phx.gen.secret
      """

    value ->
      value
  end

# For production, don't forget to configure the url host
# to something meaningful, Phoenix uses this information
# when generating URLs.
#
# Note we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the `mix phx.digest` task,
# which you should run after static files are built and
# before starting your production server.
config :inner_circle, InnerCircleWeb.Endpoint,
  url: [host: url, scheme: "https", port: String.to_integer(System.get_env("PORT") || "443")],
  cache_static_manifest: "priv/static/cache_manifest.json",
  http: [
    port: String.to_integer(System.get_env("HTTP_PORT") || "80"),
    transport_options: [socket_opts: [:inet6]]
  ],
  https: [
    port: String.to_integer(System.get_env("PORT") || "443"),
    cipher_suite: :strong,
    transport_options: [socket_opts: [:inet6]]
  ],
  secret_key_base: secret_key_base,
  live_view: [signing_salt: live_view_signing_salt]

## Email support
config :inner_circle, InnerCircle.Mailer,
  adapter: Bamboo.SMTPAdapter,
  server: smtp_server,
  username: smtp_username,
  password: smtp_password,
  ssl: true,
  tls: :if_available,
  auth: :always,
  port: String.to_integer(smtp_port),
  retries: String.to_integer(smtp_retries),
  no_mx_lookups: true

## Caching via Nebulex
config :inner_circle, InnerCircle.Cache,
  # GC interval for pushing new generation: 12 hrs
  gc_interval: :timer.hours(String.to_integer(System.get_env("CACHE_GC_INTERVAL", "12"))),
  # Max 1 million entries in cache
  max_size: 1_00_000,
  # Max 2 GB of memory, set default to 500 MB
  allocated_memory: String.to_integer(System.get_env("CACHE_SIZE", "5000000")),
  # GC min timeout: 10 sec
  gc_cleanup_min_timeout: :timer.seconds(10),
  # GC min timeout: 10 min
  gc_cleanup_max_timeout: :timer.minutes(10)

# Configures Elixir's Logger
config :logger, :console,
  level: :error,
  format: "$time $metadata[$level] $message\n",
  metadata: [:request_id]

# ## Using releases (Elixir v1.9+)
#
# If you are doing OTP releases, you need to instruct Phoenix
# to start each relevant endpoint:
#
config :inner_circle, InnerCircleWeb.Endpoint, server: true
#
# Then you can assemble a release by calling `mix release`.
# See `mix help release` for more information.
